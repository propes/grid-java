/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package grid;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class GridTest {
    @Test
    public void should_be_equal_given_two_grids_with_same_elements_and_rows() {
        int[] data = {1, 2, 3, 4};

        assertEquals(new Grid(data, 2), new Grid(data, 2));
    }

    @Test
    public void should_not_be_equal_given_two_grids_with_same_elements_but_different_rows() {
        int[] data = {1, 2, 3, 4};

        assertNotEquals(new Grid(data, 2), new Grid(data, 3));
    }

    @Test
    public void copy_should_copy_the_grid() {
        Grid grid = new Grid(new int[]{1, 2, 3, 4}, 2);
        Grid copy = grid.copy();

        assertEquals(grid, copy);
        assertNotSame(grid, copy);
    }

    @Test
    public void cell_should_be_the_value_at_the_specified_row_and_column() {
        Grid grid = new Grid(new int[]{1, 2, 3, 4, 5}, 2);
        assertEquals(1, grid.cell(0, 0));
        assertEquals(2, grid.cell(0, 1));
        assertEquals(3, grid.cell(1, 0));
        assertEquals(4, grid.cell(1, 1));
        assertEquals(5, grid.cell(2, 0));
    }

    @Test
    public void cell_should_be_the_value_at_the_specified_row_and_column_when_two_rows_and_three_columns() {
        Grid grid = new Grid(new int[]{1, 2, 3, 4}, 3);
        assertEquals(1, grid.cell(0, 0));
        assertEquals(2, grid.cell(0, 1));
        assertEquals(3, grid.cell(0, 2));
        assertEquals(4, grid.cell(1, 0));
    }

    @Test
    public void pos_should_be_the_value_at_the_specified_position() {
        Grid grid = new Grid(new int[]{1, 2, 3, 4}, 2);
        assertEquals(1, grid.pos(0));
        assertEquals(2, grid.pos(1));
        assertEquals(3, grid.pos(2));
    }

    @Test
    public void toFlatArray_should_be_a_one_dimensional_array_with_matching_elements() {
        int[] data = {1, 2, 3, 4};
        Grid grid = new Grid(data, 2);

        assertArrayEquals(data, grid.toFlatArray());
    }

    @Test
    public void toArray_should_be_a_two_dimensional_array_with_matching_elements() {
        int[] data = {1, 2, 3, 4};
        Grid grid = new Grid(data, 2);

        assertArrayEquals(new int[]{1, 2}, grid.toArray()[0]);
        assertArrayEquals(new int[]{3, 4}, grid.toArray()[1]);
    }

    @Test
    public void columns_should_be_the_number_of_columns_in_the_grid() {
        Grid grid1 = new Grid(new int[]{1, 2, 3, 4}, 2);
        Grid grid2 = new Grid(new int[]{1, 2, 3, 4}, 3);

        assertEquals(2, grid1.columns());
        assertEquals(3, grid2.columns());
    }

    @Test
    public void rows_should_be_the_number_of_rows_in_the_grid() {
        Grid grid1 = new Grid(new int[]{1, 2, 3, 4}, 4);
        Grid grid2 = new Grid(new int[]{1, 2, 3, 4}, 3);

        assertEquals(1, grid1.rows());
        assertEquals(2, grid2.rows());
    }

    @Test
    public void construction_should_be_possible_by_rows_and_columns() {
        Grid grid = new Grid(7, 5);

        assertEquals(7, grid.rows());
        assertEquals(5, grid.columns());
    }

    @Test
    public void construction_should_be_possible_by_square_length() {
        Grid grid = new Grid(5);

        assertEquals(5, grid.rows());
        assertEquals(5, grid.columns());
    }
}
